// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  clerkId     String   @unique
  username    String   @unique
  email       String   @unique
  firstName   String?
  lastName    String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  competitions CompetitionUser[]
  tips        Tip[]
  
  @@map("users")
}

model Competition {
  id          String   @id @default(cuid())
  name        String
  description String?
  code        String   @unique
  settings    Json     @default("{}") // Enhanced scoring settings stored here
  season      Int      @default(2025)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  
  // NEW: Additional competition metadata
  maxMembers  Int?     // Optional member limit
  isPublic    Boolean  @default(false) // Public vs private competitions
  
  // Relationships
  users       CompetitionUser[]
  tips        Tip[]
  
  @@map("competitions")
}

model CompetitionUser {
  id            String      @id @default(cuid())
  userId        String
  competitionId String
  role          String      @default("member") // admin, member
  joinedAt      DateTime    @default(now())
  totalPoints   Int         @default(0)
  
  // NEW: Additional user stats for quick access
  correctTips   Int         @default(0)
  totalTips     Int         @default(0)
  currentRank   Int?        // Current leaderboard position
  bestRank      Int?        // Best position achieved
  
  // Relationships
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  competition   Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, competitionId])
  @@index([competitionId, totalPoints])
  @@map("competition_users")
}

model Game {
  id              String    @id @default(cuid())
  squiggleId      String?   @unique // Made optional for testing games
  round           Int
  season          Int       @default(2025)
  year            Int       @default(2025) // Added for compatibility with your API
  homeTeam        String
  awayTeam        String
  homeTeamId      Int
  awayTeamId      Int
  venue           String?
  date            DateTime
  homeScore       Int?
  awayScore       Int?
  winner          Int?      // team ID of winner
  margin          Int?      // NEW: Actual margin for easy access
  isComplete      Boolean   @default(false)
  
  // NEW: Game metadata for better tracking
  startTime       DateTime? // Actual game start time
  completedAt     DateTime? // When game was marked complete
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relationships  
  tips            Tip[]
  
  @@index([year, round])
  @@index([isComplete])
  @@index([date])
  @@map("games")
}

model Tip {
  id               String   @id @default(cuid())
  userId           String
  gameId           String
  competitionId    String
  predictedWinner  Int      // team ID
  margin           Int?
  confidence       Int?     // 1-9 ranking
  points           Int      @default(0)
  
  // ENHANCED TRACKING FIELDS
  isCorrect        Boolean? // null = game not complete, true/false = result
  marginRank       Int?     // Position in margin accuracy ranking (1 = most accurate)
  marginAccuracy   Int?     // How many points off the actual margin
  confidenceBonus  Int      @default(0) // Bonus points from confidence
  marginBonus      Int      @default(0) // Bonus points from margin accuracy
  allCorrectBonus  Int      @default(0) // Bonus from getting all tips in round correct
  
  // NEW: Submission tracking
  submittedAt      DateTime? // When tip was first submitted
  lastModified     DateTime? // When tip was last changed
  isLocked         Boolean   @default(false) // Locked after deadline
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relationships
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  game             Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  competition      Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, gameId, competitionId])
  @@index([competitionId])
  @@index([gameId])
  @@index([userId])
  @@index([competitionId, points])
  @@map("tips")
}

model Team {
  id               Int      @id
  name             String   @unique
  nickname         String
  abbreviation     String   @unique
  primaryColor     String?
  secondaryColor   String?
  logo             String?
  
  @@map("teams")
}

// Enhanced leaderboard snapshots for historical tracking
model LeaderboardSnapshot {
  id            String   @id @default(cuid())
  competitionId String
  round         Int
  userId        String
  rank          Int
  totalPoints   Int
  correctTips   Int
  totalTips     Int
  percentage    Float    @default(0)
  marginDiff    Int      @default(0) // Total margin difference (tiebreaker)
  
  // NEW: Round-specific stats
  roundPoints   Int      @default(0)
  roundCorrect  Int      @default(0)
  roundTotal    Int      @default(0)
  allCorrectBonus Boolean @default(false)
  
  createdAt     DateTime @default(now())
  
  @@unique([competitionId, round, userId])
  @@index([competitionId, round])
  @@index([competitionId, round, rank])
  @@map("leaderboard_snapshots")
}

// NEW: Store competition activity and notifications
model CompetitionActivity {
  id            String   @id @default(cuid())
  competitionId String
  userId        String?  // null for system activities
  type          String   // 'tip_submitted', 'round_complete', 'leaderboard_update', etc.
  description   String
  metadata      Json?    // Additional data specific to activity type
  createdAt     DateTime @default(now())
  
  @@index([competitionId, createdAt])
  @@map("competition_activities")
}
